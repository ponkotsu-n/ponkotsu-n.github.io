<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ponkotsu blog - Programer 徒然草</title><link href="https://ponkotsu-n.github.io/" rel="alternate"></link><link href="https://ponkotsu-n.github.io/feeds/all.atom.xml" rel="self"></link><id>https://ponkotsu-n.github.io/</id><updated>2017-10-11T13:00:00+09:00</updated><entry><title>Dockerで楽々 Database</title><link href="https://ponkotsu-n.github.io/docker-database.html" rel="alternate"></link><published>2017-10-11T13:00:00+09:00</published><updated>2017-10-11T13:00:00+09:00</updated><author><name>ponkotsu</name></author><id>tag:ponkotsu-n.github.io,2017-10-11:/docker-database.html</id><summary type="html">&lt;p&gt;Dockerで、Databaseを使用するための手順を記述。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;はじめに&lt;/h1&gt;
&lt;p&gt;ローカル環境で簡単にデータベースを立ち上げるための、Dockerファイルを作成します。
データベースの起動には、Dockerを使用します。&lt;/p&gt;
&lt;h1&gt;データベースの作成&lt;/h1&gt;
&lt;p&gt;データベースの作成方法を、PostgresqlとMySQLの場合について記述します。&lt;/p&gt;
&lt;h2&gt;Postgresql&lt;/h2&gt;
&lt;p&gt;データベースは、/var/lib/postgresql/dataに作成します。以下の例では、データベースは以下の内容で作成します。必要であれば、適宜変更してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データベース名: workdb&lt;/li&gt;
&lt;li&gt;ユーザ名: postgres&lt;/li&gt;
&lt;li&gt;パスワード: postgres&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;docker-compose.ymlは、
&lt;script src="https://gist.github.com/ponkotsu-n/486181184f5a66123a0570c37fedf813.js"&gt;&lt;/script&gt;
となります。&lt;/p&gt;
&lt;h2&gt;MySQL&lt;/h2&gt;
&lt;p&gt;データベースは、/var/lib/mysqlに作成します。以下の例では、データベースは以下の内容で作成します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データベース名: workdb&lt;/li&gt;
&lt;li&gt;ユーザ名: mysql&lt;/li&gt;
&lt;li&gt;パスワード: mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;docker-compose.ymlは、
&lt;script src="https://gist.github.com/ponkotsu-n/871b0635df67379ea0bc0f9c7f4ddd20.js"&gt;&lt;/script&gt;
となります。&lt;/p&gt;
&lt;h1&gt;データ・ボリューム&lt;/h1&gt;
&lt;p&gt;作成したデータベースは、Dockerコンテナのデータ・ボリューム上で管理します。データ・ボリュームは、Dockeホストの &lt;code&gt;/var/lib/docker/volumes/&lt;/code&gt;に作成されます。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;このように Dockerを使用するとローカル環境にデータベースを手軽に作成できるので、大変便利です。あとは、お好きな SQL Clientからアクセスしてみてください。&lt;/p&gt;</content><category term="docker"></category><category term="postgresql"></category><category term="mysql"></category></entry><entry><title>DockerでPelicanを...</title><link href="https://ponkotsu-n.github.io/docker-pelican.html" rel="alternate"></link><published>2017-10-09T13:00:00+09:00</published><updated>2017-10-09T13:00:00+09:00</updated><author><name>ponkotsu</name></author><id>tag:ponkotsu-n.github.io,2017-10-09:/docker-pelican.html</id><summary type="html">&lt;p&gt;Dockerで、Pelicanを使用するための手順を記述。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;はじめに&lt;/h1&gt;
&lt;p&gt;ここでは、Docker上で Peicanを使用するための手順について記述します。&lt;/p&gt;
&lt;h2&gt;目的&lt;/h2&gt;
&lt;p&gt;Docker上に Pelican実行環境を作成し、Github上に Blogを公開することを目的とします。Dockerのインストールは、Google等で検索するとよい記事がたくさん公開されているので、ここでは割愛します。その他も基本的に検索すれば、わかりやすいページがいっぱいありますが...。&lt;/p&gt;
&lt;p&gt;ここでは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker上に Pelicanをインストールする&lt;/li&gt;
&lt;li&gt;Pelicanで Blogを作成する&lt;/li&gt;
&lt;li&gt;Githubへ Blogを公開する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;について記述します。&lt;/p&gt;
&lt;h1&gt;Dockerで Pelicanを動かすために&lt;/h1&gt;
&lt;p&gt;Pelicanを起動するための、Dockerfileを作成します。&lt;/p&gt;
&lt;h2&gt;ファイルの構成&lt;/h2&gt;
&lt;p&gt;Dockerを使用するためのファイルは、以下のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--
 |
 +- pelican/
 |     |
 |     +- Dockerfile
 |
 +- docker-compose.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;Dockerfileでは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alpine&lt;/li&gt;
&lt;li&gt;python3&lt;/li&gt;
&lt;li&gt;make&lt;/li&gt;
&lt;li&gt;bash&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;openssh&lt;/li&gt;
&lt;li&gt;pip&lt;/li&gt;
&lt;li&gt;pelican&lt;/li&gt;
&lt;li&gt;markdown&lt;/li&gt;
&lt;li&gt;ghp-import&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;をインストールします。&lt;/p&gt;
&lt;p&gt;また、Dockerの起動には、Docker Composeを使用します。&lt;/p&gt;
&lt;p&gt;Dockerfileと docker-compose.ymlは、
&lt;script src="https://gist.github.com/ponkotsu-n/5084c57fd4fe3a1c46f6bc536e1981d6.js"&gt;&lt;/script&gt;
となります。&lt;/p&gt;
&lt;p&gt;ソースコードは、&lt;a href="https://github.com/ponkotsu-n/docker-pelican/"&gt;github.com&lt;/a&gt;で公開しています。&lt;/p&gt;
&lt;h2&gt;ビルドと起動&lt;/h2&gt;
&lt;p&gt;Pelicanを使用するために、用意した Dockerfileを使用して、イメージを作成します。イメージを作成後に、Docker上で起動します。
Pelicanをビルドして、起動するには、&lt;code&gt;Docker Quickstart Terminal&lt;/code&gt;を起動して、以下のように実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &amp;gt; cd /c/Work/pelican
 &amp;gt; docker-compose build
 &amp;gt; docker-compose up -d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/images/docker/build-1.png" alt="docker-compose build" title="ビルド1"&gt;
&lt;img src="/images/docker/build-2.png" alt="docker-compose build" title="ビルド2"&gt;&lt;/p&gt;
&lt;h2&gt;停止&lt;/h2&gt;
&lt;p&gt;起動したDockerコンポーネントを停止するには、 &lt;code&gt;docker-compose down&lt;/code&gt;を実行します。&lt;/p&gt;
&lt;p&gt;停止するには、以下のように実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker-compose down
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/images/docker/down.png" alt="docker-compose down" title="終了"&gt;&lt;/p&gt;
&lt;h1&gt;Pelicanの使い方&lt;/h1&gt;
&lt;p&gt;ここでは、Pelicanを使用して、静的に HTMLを作成し、ローカル環境で確認し、githubで公開する方法を記述します。&lt;/p&gt;
&lt;h2&gt;htmlの作成&lt;/h2&gt;
&lt;p&gt;Pellicanでビルドした HTMLファイルは、&lt;code&gt;output/&lt;/code&gt;に作成されます。このディレクトリを&lt;code&gt;github&lt;/code&gt;で公開すれば、ブログを始めることができます。&lt;/p&gt;
&lt;p&gt;Pelicanでビルドするには、以下のように実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# cd Pelicnの作業ディレクトリ
#
# make html       # 公開する HTMLを作成する
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/images/docker/make-html.png" alt="make html" title="HTMLの作成"&gt;&lt;/p&gt;
&lt;h2&gt;ローカル環境での確認&lt;/h2&gt;
&lt;p&gt;Pelicanでは、ローカルで作成した HTMLを確認するための、HTMLサーバが梱包されています。HTML サーバの起動は、以下のようにします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# make serve      # localhost:8080で作成した HTMLを確認する
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/images/docker/make-serve.png" alt="make serve" title="HTMLサーバの起動"&gt;&lt;/p&gt;
&lt;p&gt;サーバを起動した後、作成した HTMLは Windows上の Chrome等で確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/docker/chrome.png" alt="Chrome" title="HTMLの確認"&gt;&lt;/p&gt;
&lt;h2&gt;githubへの公開&lt;/h2&gt;
&lt;p&gt;Githubへブログページを公開するには、Githubに&lt;code&gt;ユーザ名.github.io.git&lt;/code&gt;というリポジトリを作成することで行います。詳細は、&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;を参照してください。また、ググるといろいろ参考になるページが出てきます。
ここでは&lt;code&gt;Github Pages&lt;/code&gt;を作成した後、Pelicanで作成したブログを公開する方法を記述します。&lt;/p&gt;
&lt;p&gt;初回のみ以下のようにして、&lt;code&gt;git&lt;/code&gt;の初期化を行います。ここでは、&lt;code&gt;ponkotsu-n&lt;/code&gt;ユーザに対して、Github Pagesを作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# git init
# git remote add origin https://github.com/ponkotsu-n/ponkotsu-n.github.io.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Github Pages&lt;/code&gt;へブログを公開するには以下のようにします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# make clean publish    # 公開用の HTMLを作成する
# make github           # 作成した HTMLを githubに公開する
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;今回は、Dockerを使用して、Pelicanでブログを作成し、Githubへ公開するまでを簡単にまとめてみました。Dockerを使ってみて、かなり使いやすいと感じました。Windows上でコードを編集し、Docker上で実行するという流れが、心地よいです。&lt;/p&gt;
&lt;p&gt;これで、Windowsにいろいろインストールして、いつの間にか何のためにインストールしたかわからなくなるアプリケーションが溢れかえるという悪循環から解放されるように思います。&lt;/p&gt;</content><category term="pelican"></category><category term="docker"></category></entry><entry><title>はじめてのPelicanブログ</title><link href="https://ponkotsu-n.github.io/blog-first-post.html" rel="alternate"></link><published>2017-10-07T22:00:00+09:00</published><updated>2017-10-07T22:00:00+09:00</updated><author><name>ponkotsu</name></author><id>tag:ponkotsu-n.github.io,2017-10-07:/blog-first-post.html</id><summary type="html">&lt;p&gt;ペリカンでブログをはじめてみた&lt;/p&gt;</summary><content type="html">&lt;h1&gt;ペリカンでブログ&lt;/h1&gt;
&lt;p&gt;ペリカンでブログをはじめてみました。Markdownで気軽に書けるので、便利そうです。&lt;/p&gt;
&lt;p&gt;最近、物忘れが激しいので、自分でいろいろやったことをまとめていきたいと思います。あくまでも、自分のための備忘録です。&lt;/p&gt;
&lt;p&gt;不定期更新のです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SyntaxHighlitも使えるぉ&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="pelican"></category><category term="python"></category></entry></feed>